/*
Deployment script for SQLDeveloperTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SQLDeveloperTest"
:setvar DefaultFilePrefix "SQLDeveloperTest"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Addresses]...';


GO
CREATE TABLE [dbo].[Addresses] (
    [AddressId]  INT           IDENTITY (1, 1) NOT NULL,
    [Street]     NVARCHAR (50) NULL,
    [City]       NVARCHAR (50) NULL,
    [State]      NVARCHAR (50) NULL,
    [PostalCode] NVARCHAR (4)  NULL,
    [NameId]     INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([AddressId] ASC)
);


GO
PRINT N'Creating [dbo].[AppUsers]...';


GO
CREATE TABLE [dbo].[AppUsers] (
    [AppUserId] INT            IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([AppUserId] ASC)
);


GO
PRINT N'Creating [dbo].[AppUsersRoles]...';


GO
CREATE TABLE [dbo].[AppUsersRoles] (
    [AppUsersRoleId] INT IDENTITY (1, 1) NOT NULL,
    [AppUserId]      INT NOT NULL,
    [RoleId]         INT NOT NULL,
    PRIMARY KEY CLUSTERED ([AppUsersRoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Emails]...';


GO
CREATE TABLE [dbo].[Emails] (
    [EmailId]      INT            IDENTITY (1, 1) NOT NULL,
    [EmailAddress] NVARCHAR (150) NULL,
    [NameId]       INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([EmailId] ASC)
);


GO
PRINT N'Creating [dbo].[MarketingCategories]...';


GO
CREATE TABLE [dbo].[MarketingCategories] (
    [MarketingCategoryId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([MarketingCategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[Names]...';


GO
CREATE TABLE [dbo].[Names] (
    [NameId]              INT            IDENTITY (1, 1) NOT NULL,
    [Name]                NVARCHAR (150) NOT NULL,
    [ACN]                 NVARCHAR (9)   NULL,
    [ABN]                 NVARCHAR (11)  NULL,
    [IsIndividual]        BIT            NOT NULL,
    [MarketingCategoryId] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([NameId] ASC)
);


GO
PRINT N'Creating [dbo].[Phones]...';


GO
CREATE TABLE [dbo].[Phones] (
    [PhoneId] INT           IDENTITY (1, 1) NOT NULL,
    [Number]  NVARCHAR (15) NULL,
    [NameId]  INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([PhoneId] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [RoleId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]   NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[RoleSecureNames]...';


GO
CREATE TABLE [dbo].[RoleSecureNames] (
    [RoleSecureNameId] INT IDENTITY (1, 1) NOT NULL,
    [RoleId]           INT NOT NULL,
    [NameId]           INT NOT NULL,
    PRIMARY KEY CLUSTERED ([RoleSecureNameId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Addresses_ToNames]...';


GO
ALTER TABLE [dbo].[Addresses]
    ADD CONSTRAINT [FK_Addresses_ToNames] FOREIGN KEY ([NameId]) REFERENCES [dbo].[Names] ([NameId]);


GO
PRINT N'Creating [dbo].[FK_Roles_AppUsers]...';


GO
ALTER TABLE [dbo].[AppUsersRoles]
    ADD CONSTRAINT [FK_Roles_AppUsers] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AppUsers] ([AppUserId]);


GO
PRINT N'Creating [dbo].[FK_Emails_Names]...';


GO
ALTER TABLE [dbo].[Emails]
    ADD CONSTRAINT [FK_Emails_Names] FOREIGN KEY ([NameId]) REFERENCES [dbo].[Names] ([NameId]);


GO
PRINT N'Creating [dbo].[FK_Names_MarketingCategories]...';


GO
ALTER TABLE [dbo].[Names]
    ADD CONSTRAINT [FK_Names_MarketingCategories] FOREIGN KEY ([MarketingCategoryId]) REFERENCES [dbo].[MarketingCategories] ([MarketingCategoryId]);


GO
PRINT N'Creating [dbo].[FK_Phones_Names]...';


GO
ALTER TABLE [dbo].[Phones]
    ADD CONSTRAINT [FK_Phones_Names] FOREIGN KEY ([NameId]) REFERENCES [dbo].[Names] ([NameId]);


GO
PRINT N'Creating [dbo].[FK_RoleSecureNames_Roles]...';


GO
ALTER TABLE [dbo].[RoleSecureNames]
    ADD CONSTRAINT [FK_RoleSecureNames_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[FK_RoleSecureNames_Names]...';


GO
ALTER TABLE [dbo].[RoleSecureNames]
    ADD CONSTRAINT [FK_RoleSecureNames_Names] FOREIGN KEY ([NameId]) REFERENCES [dbo].[Names] ([NameId]);


GO
PRINT N'Creating [dbo].[GetFilterByName]...';


GO
-- Get the filter value string by filter name

CREATE FUNCTION [dbo].[GetFilterByName] 
(
	@Filters nvarchar(250),
	@FilterName nvarchar(50)
)
RETURNS nvarchar(250)
AS
BEGIN
	DECLARE @Result nvarchar(250)
	SET @FilterName = @FilterName + '='
	IF CHARINDEX(@FilterName, @Filters, 0) = 0
	BEGIN
		SET @Result = ''
	END
	ELSE
	BEGIN
		SET @Result = SUBSTRING(@Filters, CHARINDEX(@FilterName, @Filters, 0), CHARINDEX(';', @Filters, CHARINDEX(@FilterName, @Filters, 0)))

		SET @Result = REPLACE(SUBSTRING(@Result, CHARINDEX('=', @Result, 0) + 1, CHARINDEX(';', @Result, 0) - CHARINDEX('=', @Result, 0)), ';', '')
	END

	RETURN @Result
END
GO
PRINT N'Creating [dbo].[GetNameIdsByAppUserId]...';


GO
-- Filtered by the role(s) of the user

CREATE FUNCTION [dbo].[GetNameIdsByAppUserId]
(	
	@AppUserId int
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT sn.NameId
	FROM dbo.AppUsersRoles ur
	INNER JOIN dbo.RoleSecureNames sn ON sn.RoleId = ur.RoleId OR ur.RoleId = 1
	WHERE ur.AppUserId = @AppUserId
	Group By sn.NameId
)
GO
PRINT N'Creating [dbo].[SplitString]...';


GO
-- Split comma separeted string to table

CREATE FUNCTION [dbo].[SplitString]
(    
      @Input NVARCHAR(MAX),
      @Character CHAR(1)
)
RETURNS @Output TABLE (
      Item NVARCHAR(1000)
)
AS
BEGIN
      DECLARE @StartIndex INT, @EndIndex INT
 
      SET @StartIndex = 1
      IF SUBSTRING(@Input, LEN(@Input) - 1, LEN(@Input)) <> @Character
      BEGIN
            SET @Input = @Input + @Character
      END
 
      WHILE CHARINDEX(@Character, @Input) > 0
      BEGIN
            SET @EndIndex = CHARINDEX(@Character, @Input)
           
            INSERT INTO @Output(Item)
            SELECT SUBSTRING(@Input, @StartIndex, @EndIndex - 1)
           
            SET @Input = SUBSTRING(@Input, @EndIndex + 1, LEN(@Input))
      END
 
      RETURN
END
GO
PRINT N'Creating [dbo].[GetNamesInfo]...';


GO
CREATE PROCEDURE [dbo].[GetNamesInfo]
	@AppUserId int,
	@SortDesc bit = 0,
	@IsIndividual bit = NULL,
	@Filters nvarchar(250) = '',
	@PageSize int = 2147483647,
	@PageNumber int = 1
AS
BEGIN
	SELECT n.NameId, n.Name, 
	STUFF
	(
		(
			SELECT ', ' + e.EmailAddress
			FROM dbo.Emails e
			WHERE e.NameId = n.NameId
			ORDER BY e.EmailId
			FOR XML PATH (''),TYPE
		).value('.','nvarchar(max)')
		,1,2,''
	) AS Emails,
	STUFF
	(
		(
			SELECT ', ' + p.Number
			FROM dbo.Phones p
			WHERE p.NameId = n.NameId
			ORDER BY p.PhoneId
			FOR XML PATH (''),TYPE
		).value('.','nvarchar(max)')
		,1,2,''
	) AS Phones,
	STUFF
	(
		(
			SELECT ', ' + a.City + ' (' + a.[State] +')'
			FROM dbo.Addresses a
			WHERE a.NameId = n.NameId
			ORDER BY a.AddressId
			FOR XML PATH (''),TYPE
		).value('.','nvarchar(max)')
		,1,2,''
	) AS Addresses,

	COUNT(*) OVER() AS TotalNumber
	 
	FROM dbo.Names n

	-- For secured access 
	INNER JOIN dbo.GetNameIdsByAppUserId(@AppUserId) scr
	ON scr.NameId = n.NameId

	-- a substring in the Name
	INNER JOIN (SELECT Item FROM dbo.SplitString(dbo.GetFilterByName(@Filters, 'Name'), ',')) filterNames 
	ON dbo.GetFilterByName(@Filters, 'Name') = '' OR (n.Name LIKE '%' + filterNames.Item + '%')
	
	WHERE n.IsIndividual = @IsIndividual OR @IsIndividual is NULL

	-- marketing categories assigned to the names
	And (dbo.GetFilterByName(@Filters, 'MarketingCategoryId') = ''
		OR	n.MarketingCategoryId IN (SELECT CAST(Item AS INTEGER)
            FROM dbo.SplitString(dbo.GetFilterByName(@Filters, 'MarketingCategoryId'), ','))
    )

	-- suburb(city) in an address against the name
	And (dbo.GetFilterByName(@Filters, 'City') = ''
		OR	EXISTS
				(SELECT City FROM (SELECT addr.City FROM dbo.Addresses addr WHERE addr.NameId = n.NameId) addrIn
				INNER JOIN 
				(SELECT Item FROM dbo.SplitString(dbo.GetFilterByName(@Filters, 'City'), ',')) cities
				ON addrIn.City = cities.Item)
	)
	
	-- state in an address against the name
	And (dbo.GetFilterByName(@Filters, 'State') = '' 
		OR	EXISTS
				(SELECT [State] FROM (SELECT addr.[State] FROM dbo.Addresses addr WHERE addr.NameId = n.NameId) addrIn
				INNER JOIN 
				(SELECT Item FROM dbo.SplitString(dbo.GetFilterByName(@Filters, 'State'), ',')) states
				ON addrIn.[State] = states.Item)
	 )

	ORDER BY 
		CASE WHEN @SortDesc = 1 THEN n.Name END DESC ,
        CASE WHEN ISNULL(@SortDesc, 0) <> 1 THEN n.Name END ASC	
	
		OFFSET @PageSize * (@PageNumber - 1) ROWS
		FETCH NEXT @PageSize ROWS ONLY
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c3d5e762-cb4b-4aca-b7fe-cf867199c997')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c3d5e762-cb4b-4aca-b7fe-cf867199c997')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1859c7ea-3945-4abb-92c1-7a8b7b3fc293')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1859c7ea-3945-4abb-92c1-7a8b7b3fc293')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4fb26d17-4053-48cd-8144-63f26ae07c30')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4fb26d17-4053-48cd-8144-63f26ae07c30')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2ee22df8-f8a9-4536-bc77-d2a386c21134')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2ee22df8-f8a9-4536-bc77-d2a386c21134')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '98c6a67b-bd7f-4a38-9b26-917df02e8cab')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('98c6a67b-bd7f-4a38-9b26-917df02e8cab')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b212fbd6-b2ab-4686-a793-13ddefd2ff7e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b212fbd6-b2ab-4686-a793-13ddefd2ff7e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3b998185-53a1-4ce9-b38e-be2fb3336a38')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3b998185-53a1-4ce9-b38e-be2fb3336a38')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7d27bd73-6568-467b-883b-917e4f05f066')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7d27bd73-6568-467b-883b-917e4f05f066')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bf7a9116-974e-4a6b-9d8e-4dbdc4d46b41')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bf7a9116-974e-4a6b-9d8e-4dbdc4d46b41')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '19b95195-f002-4bce-8b52-65c0957d8f82')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('19b95195-f002-4bce-8b52-65c0957d8f82')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '79a48dce-795d-4a5f-b092-2b7a179c8482')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('79a48dce-795d-4a5f-b092-2b7a179c8482')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '171f26e4-44e9-4d4a-a476-da8db6ffd291')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('171f26e4-44e9-4d4a-a476-da8db6ffd291')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b9b39875-d12c-4893-b877-a5409f83a799')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b9b39875-d12c-4893-b877-a5409f83a799')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd41e187d-1c2d-4ce8-a2b9-f5731f9dd754')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d41e187d-1c2d-4ce8-a2b9-f5731f9dd754')

GO

GO
:setvar numberRows "1000000"
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- Setting row counts in tables


IF NOT EXISTS (SELECT * FROM [dbo].[Roles])
BEGIN
	SET IDENTITY_INSERT [dbo].[Roles] ON

	INSERT INTO [dbo].[Roles] ([RoleId], [Name]) VALUES (1, N'Administrator')
	INSERT INTO [dbo].[Roles] ([RoleId], [Name]) VALUES (2, N'Client')
	INSERT INTO [dbo].[Roles] ([RoleId], [Name]) VALUES (3, N'Manager Responsible')
	INSERT INTO [dbo].[Roles] ([RoleId], [Name]) VALUES (4, N'Acting Manager')
	INSERT INTO [dbo].[Roles] ([RoleId], [Name]) VALUES (5, N'Secretary')

	SET IDENTITY_INSERT [dbo].[Roles] OFF
END    
    


IF NOT EXISTS (SELECT * FROM [dbo].[AppUsers])
BEGIN
	SET IDENTITY_INSERT [dbo].[AppUsers] ON

	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (1, N'Katerine Aultman')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (2, N'Fred Robin')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (3, N'Elfreda Aday')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (4, N'Alicia Delee')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (5, N'Gregg Ashmore')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (6, N'Vicente Garth')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (7, N'Particia Conner')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (8, N'Micha Bunt')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (9, N'Angeles Burrier')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (10, N'Mimi Westervelt')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (11, N'Emily Hockman')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (12, N'Mason Kersten')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (13, N'Millie Byrnes')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (14, N'Hermine Kissane')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (15, N'Lavinia Quincy')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (16, N'Alba Langsam')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (17, N'Nieves Guida')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (18, N'Loren Hackler')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (19, N'Lonnie Ploof')
	INSERT INTO [dbo].[AppUsers] ([AppUserId], [Name]) VALUES (20, N'Sang Etheridge')

	SET IDENTITY_INSERT [dbo].[AppUsers] OFF
END 

    
IF NOT EXISTS (SELECT * FROM [dbo].[AppUsersRoles])
BEGIN
	DECLARE @countAppUsersRoles INT
	SET @countAppUsersRoles = 1

	WHILE @countAppUsersRoles <= 20
	BEGIN
		DECLARE @countRoleAppUsersRoles INT
		SET @countRoleAppUsersRoles = 1
		DECLARE @lengthRoleAppUsersRoles INT
		SET @lengthRoleAppUsersRoles = CAST(RAND() * 2 + 1 as INT)
		
		WHILE @countRoleAppUsersRoles <= @lengthRoleAppUsersRoles
		BEGIN
			INSERT INTO [dbo].[AppUsersRoles] ([AppUserId], [RoleId]) 
				VALUES (
					@countAppUsersRoles,
					CAST(RAND() * 5 + 1 as INT))

			SET @countRoleAppUsersRoles = @countRoleAppUsersRoles + 1
		END

		SET @countAppUsersRoles = @countAppUsersRoles +1
	END
END   


IF NOT EXISTS (SELECT * FROM [dbo].[MarketingCategories])
BEGIN
	SET IDENTITY_INSERT [dbo].[MarketingCategories] ON

	INSERT INTO [dbo].[MarketingCategories] (MarketingCategoryId, [Name]) VALUES (1, N'Article marketing')
	INSERT INTO [dbo].[MarketingCategories] (MarketingCategoryId, [Name]) VALUES (2, N'Global marketing')
	INSERT INTO [dbo].[MarketingCategories] (MarketingCategoryId, [Name]) VALUES (3, N'Personalization')

	SET IDENTITY_INSERT [dbo].[MarketingCategories] OFF
END    
    


IF NOT EXISTS (SELECT * FROM [dbo].[Names])
BEGIN
	SET IDENTITY_INSERT [dbo].[Names] ON

	DECLARE @count INT
	SET @count = 1

	WHILE @count < $(numberRows)
	BEGIN
		DECLARE @tempName VARCHAR(150)
		SET @tempName = ''
		DECLARE @countName INT
		SET @countName = 1

		DECLARE @lengthName INT
		SET @lengthName = CAST(RAND() * 10 + 5 as INT)

		WHILE @countName < @lengthName
			BEGIN
				SET @tempName = @tempName + CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97) + CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97)
				SET @countName = @countName + 1
			END  

		INSERT INTO dbo.[Names] ([NameId], [Name], [ACN], [ABN], [IsIndividual], [MarketingCategoryId])
			SELECT @count [NameId],
					 @tempName [Name],	
					CAST(ROUND(RAND() * 900000000, 0) + 100000000 as INT) [ACN],
					CAST(ROUND(RAND() * 900000000,0) + 100000000 as INT) [ABN],
					CONVERT(bit, ROUND(1*RAND(),0)) [IsIndividual],
					CAST(RAND() * 3 + 1 as INT)
		
		SET @count = @count + 1
	END

	SET IDENTITY_INSERT [dbo].[Names] OFF
END    

IF NOT EXISTS (SELECT * FROM [dbo].[Addresses])
BEGIN
	DECLARE @countAddresses INT
	SET @countAddresses = 1

	WHILE @countAddresses < $(numberRows)
	BEGIN
		DECLARE @countRoleAddresses INT
		SET @countRoleAddresses = 1
		DECLARE @lengthRoleAddresses INT
		SET @lengthRoleAddresses = CAST(RAND() * 2 + 1 as INT)
		
		DECLARE @randNum int
		DECLARE @state NVARCHAR(25)
		DECLARE @city NVARCHAR(25)

		SET @randNum = CAST(RAND() * 5 + 1 as INT)

		SET @state = CASE @randNum
			WHEN 1 THEN 'NSW'
			WHEN 2 THEN 'NSW'
			WHEN 3 THEN 'Victoria'
			WHEN 4 THEN 'Queensland'
			ELSE 'Western Australia'
        END

		SET @city = CASE @randNum
			WHEN 1 THEN 'Sydney'
			WHEN 2 THEN 'Liverpool'
			WHEN 3 THEN 'Melbourne'
			WHEN 4 THEN 'Brisbane'
			ELSE 'Perth'
        END

		WHILE @countRoleAddresses <= @lengthRoleAddresses
		BEGIN
			
			INSERT INTO [dbo].[Addresses] ([Street], [City], [State], [PostalCode], [NameId]) 
				VALUES (
					'12 Some ' + CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97) + CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97) +' St.',
					@city,
					@state,
					'1234'
					, @countAddresses)

			SET @countRoleAddresses = @countRoleAddresses + 1
		END

		SET @countAddresses = @countAddresses +1
	END
END   
IF NOT EXISTS (SELECT * FROM [dbo].[Emails])
BEGIN
	DECLARE @countEmails INT
	SET @countEmails = 1

	WHILE @countEmails < $(numberRows)
	BEGIN
		DECLARE @countRoleEmails INT
		SET @countRoleEmails = 1
		DECLARE @lengthRoleEmails INT
		SET @lengthRoleEmails = CAST(RAND() * 2 + 1 as INT)
		
		WHILE @countRoleEmails <= @lengthRoleEmails
		BEGIN
			INSERT INTO [dbo].[Emails] (EmailAddress, [NameId]) 
				VALUES (
					CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97) + CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97) + CHAR((ABS(CHECKSUM(NEWID())) % 26) + 97) + '.rep123@gmail.com'
					, @countEmails)

			SET @countRoleEmails = @countRoleEmails + 1
		END

		SET @countEmails = @countEmails +1
	END
END   
IF NOT EXISTS (SELECT * FROM [dbo].[Phones])
BEGIN
	DECLARE @countPhones INT
	SET @countPhones = 1

	WHILE @countPhones < $(numberRows)
	BEGIN
		DECLARE @countRolePhones INT
		SET @countRolePhones = 1
		DECLARE @lengthRolePhones INT
		SET @lengthRolePhones = CAST(RAND() * 2 + 1 as INT)
		
		WHILE @countRolePhones <= @lengthRolePhones
		BEGIN
			INSERT INTO [dbo].[Phones] (Number, [NameId]) 
				VALUES (
					CAST(ROUND(RAND() * 90000000, 0) + 20000000 as INT)
					, @countPhones)

			SET @countRolePhones = @countRolePhones + 1
		END

		SET @countPhones = @countPhones +1
	END
END   
IF NOT EXISTS (SELECT * FROM [dbo].[RoleSecureNames])
BEGIN
	DECLARE @countRoleSecureNames INT
	SET @countRoleSecureNames = 1

	WHILE @countRoleSecureNames < $(numberRows)
	BEGIN
		DECLARE @countRoleRoleSecureNames INT
		SET @countRoleRoleSecureNames = 1
		DECLARE @lengthRoleRoleSecureNames INT
		SET @lengthRoleRoleSecureNames = CAST(RAND() * 3 + 1 as INT)
		
		WHILE @countRoleRoleSecureNames <= @lengthRoleRoleSecureNames
		BEGIN
			INSERT INTO [dbo].[RoleSecureNames] ([RoleId], [NameId]) 
				VALUES (CAST(RAND() * 5 + 1 as INT), @countRoleSecureNames)

			SET @countRoleRoleSecureNames = @countRoleRoleSecureNames + 1
		END

		SET @countRoleSecureNames = @countRoleSecureNames +1
	END
END    

-- Run Test Scripts

PRINT N'-- Test GetFilterByName, format filters: nameFilter1=ValueFilter1;nameFilter2=ValueFilter2;'

SELECT [dbo].[GetFilterByName] ('City=Liverpool;State=NSW;Name=adr;', 'City') as Liverpool,
			[dbo].[GetFilterByName] ('City=Liverpool;State=NSW;Name=adr;', 'State') as NSW,
				[dbo].[GetFilterByName] ('City=Liverpool;State=NSW;Name=adr;', 'Name') as adr,
					[dbo].[GetFilterByName] ('City=Liverpool;State=NSW,Victoria;Name=adr;', 'State') as NSW_Victoria

PRINT N'-- Test GetNameIdsByAppUserId'
PRINT N'-- Admin role - all names, another role - not all'

DECLARE @admin int
DECLARE @user int

SELECT TOP 1 @admin = ar.AppUserId FROM AppUsersRoles ar WHERE ar.RoleId = 1
SELECT TOP 1 @user = ar.AppUserId FROM AppUsersRoles ar WHERE ar.RoleId = 2

SELECT TOP 20 NameId FROM [dbo].[GetNameIdsByAppUserId] (@admin)
ORDER BY NameId

SELECT TOP 20 NameId FROM [dbo].[GetNameIdsByAppUserId] (@user)
ORDER BY NameId

PRINT N'-- Test SplitString';

SELECT Item FROM [dbo].[SplitString] ('NSW',',')
	SELECT Item FROM [dbo].[SplitString] ('NSW,Victoria',',')

PRINT N'-- Test GetNamesInfo procedure'

DECLARE	@return_value int

EXEC	@return_value = [dbo].[GetNamesInfo]
		@AppUserId = 1,
		@SortDesc = 0,
		@IsIndividual = 1,
		@Filters = N'City=Liverpool;State=NSW;Name=adr;',
		@PageSize = 50,
		@PageNumber = 1

SELECT	'Return Value' = @return_value

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
